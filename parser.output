Terminals unused in grammar

    IDENTIFIER
    AVERAGE_LIST
    IS_PRIME
    FIBONACCI
    MIN_IN_LIST
    REVERSE_STRING
    IS_IN_LIST
    CELSIUS_TO_FAHRENHEIT
    FAHRENHEIT_TO_CELSIUS
    CHAR_COUNT
    CONTAINS_SUBSTRING
    MAX_IN_MATRIX
    IS_PALINDROME
    TO_UPPERCASE
    TO_LOWERCASE
    UPPERCASE_COUNT
    LOWERCASE_COUNT
    SWAP_CASE
    BINARY_SEARCH
    SELECTION_SORT
    BUBBLE_SORT
    TO_BINARY
    BINARY_TO_DECIMAL
    REMOVE_EXTRA_SPACES
    COMBINATION
    UNIQUE_ELEMENTS
    GCD
    LCM


Grammar

    0 $accept: program $end

    1 program: ε
    2        | program statement SEMICOLON

    3 statement: IS_EVEN expression
    4          | FACTORIAL expression
    5          | MAX_IN_LIST list
    6          | SUM_LIST list

    7 list: '[' numbers ']'

    8 numbers: NUMBER
    9        | numbers ',' NUMBER

   10 expression: NUMBER


Terminals, with rules where they appear

    $end (0) 0
    ',' (44) 9
    '[' (91) 7
    ']' (93) 7
    error (256)
    NUMBER <num> (258) 8 9 10
    IDENTIFIER <num> (259)
    IS_EVEN <num> (260) 3
    FACTORIAL <num> (261) 4
    MAX_IN_LIST <num> (262) 5
    SUM_LIST <num> (263) 6
    AVERAGE_LIST <num> (264)
    IS_PRIME <num> (265)
    FIBONACCI <num> (266)
    MIN_IN_LIST <num> (267)
    REVERSE_STRING <num> (268)
    IS_IN_LIST <num> (269)
    CELSIUS_TO_FAHRENHEIT <num> (270)
    FAHRENHEIT_TO_CELSIUS <num> (271)
    CHAR_COUNT <num> (272)
    CONTAINS_SUBSTRING <num> (273)
    MAX_IN_MATRIX <num> (274)
    IS_PALINDROME <num> (275)
    TO_UPPERCASE <num> (276)
    TO_LOWERCASE <num> (277)
    UPPERCASE_COUNT <num> (278)
    LOWERCASE_COUNT <num> (279)
    SWAP_CASE <num> (280)
    BINARY_SEARCH <num> (281)
    SELECTION_SORT <num> (282)
    BUBBLE_SORT <num> (283)
    TO_BINARY <num> (284)
    BINARY_TO_DECIMAL <num> (285)
    REMOVE_EXTRA_SPACES <num> (286)
    COMBINATION <num> (287)
    UNIQUE_ELEMENTS <num> (288)
    GCD <num> (289)
    LCM <num> (290)
    SEMICOLON (291) 2


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    program (41)
        on left: 1 2
        on right: 0 2
    statement (42)
        on left: 3 4 5 6
        on right: 2
    list <list> (43)
        on left: 7
        on right: 5 6
    numbers <list> (44)
        on left: 8 9
        on right: 7 9
    expression <num> (45)
        on left: 10
        on right: 3 4


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    2 program: program • statement SEMICOLON

    $end         shift, and go to state 2
    IS_EVEN      shift, and go to state 3
    FACTORIAL    shift, and go to state 4
    MAX_IN_LIST  shift, and go to state 5
    SUM_LIST     shift, and go to state 6

    statement  go to state 7


State 2

    0 $accept: program $end •

    $default  accept


State 3

    3 statement: IS_EVEN • expression

    NUMBER  shift, and go to state 8

    expression  go to state 9


State 4

    4 statement: FACTORIAL • expression

    NUMBER  shift, and go to state 8

    expression  go to state 10


State 5

    5 statement: MAX_IN_LIST • list

    '['  shift, and go to state 11

    list  go to state 12


State 6

    6 statement: SUM_LIST • list

    '['  shift, and go to state 11

    list  go to state 13


State 7

    2 program: program statement • SEMICOLON

    SEMICOLON  shift, and go to state 14


State 8

   10 expression: NUMBER •

    $default  reduce using rule 10 (expression)


State 9

    3 statement: IS_EVEN expression •

    $default  reduce using rule 3 (statement)


State 10

    4 statement: FACTORIAL expression •

    $default  reduce using rule 4 (statement)


State 11

    7 list: '[' • numbers ']'

    NUMBER  shift, and go to state 15

    numbers  go to state 16


State 12

    5 statement: MAX_IN_LIST list •

    $default  reduce using rule 5 (statement)


State 13

    6 statement: SUM_LIST list •

    $default  reduce using rule 6 (statement)


State 14

    2 program: program statement SEMICOLON •

    $default  reduce using rule 2 (program)


State 15

    8 numbers: NUMBER •

    $default  reduce using rule 8 (numbers)


State 16

    7 list: '[' numbers • ']'
    9 numbers: numbers • ',' NUMBER

    ']'  shift, and go to state 17
    ','  shift, and go to state 18


State 17

    7 list: '[' numbers ']' •

    $default  reduce using rule 7 (list)


State 18

    9 numbers: numbers ',' • NUMBER

    NUMBER  shift, and go to state 19


State 19

    9 numbers: numbers ',' NUMBER •

    $default  reduce using rule 9 (numbers)
